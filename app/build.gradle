apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "uk.co.rogerstech.servalot"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

sourceSets {
    pc {
        java {
            srcDir 'src/main/java'

            // Exclude Android specific java files
            exclude '**/MainActivity.java'
            exclude '**/RfcommHelper.java'
            exclude '**/RfcommNode.java'
            exclude '**/RfcommNodeFactory.java'
            exclude '**/WebViewHelper.java'
            exclude '**/BackgroundService.java'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'org.java-websocket:Java-WebSocket:1.4.0'
    pcImplementation 'org.json:json:20171018'
    pcImplementation 'org.java-websocket:Java-WebSocket:1.4.0'
}

task pcRun(type: JavaExec) {
    group = 'run'
    description = 'Run using a conventional JVM \'' + executable + '\' as on a PC.'
    classpath = sourceSets.pc.runtimeClasspath
    main = 'uk.co.rogerstech.servalot.Servalot'
}

task info() {
    group = 'help'
    description = 'Displays the class paths and other variables.'
    doLast {
        //println 'Android tasks: ' + android.project.tasks
        println 'Android debug class path: ' + configurations.debugRuntimeClasspath.getAsPath()
        println 'PC runtime class path: ' + sourceSets.pc.runtimeClasspath.getAsPath()
    }
}

configure(pcClasses) {
    description = 'Build classes required to run on a conventional JVM as on a PC.'
}
